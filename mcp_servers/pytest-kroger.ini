[tool:pytest]
# Pytest configuration for Kroger MCP Server tests

# Test discovery
testpaths = tests/unit/test_kroger_mcp.py
python_files = test_kroger_*.py
python_classes = Test*
python_functions = test_*

# Test markers
markers =
    unit: Unit tests for individual components
    integration: Integration tests for component interactions
    e2e: End-to-end tests for complete workflows
    security: Security-focused tests
    performance: Performance and load tests
    schema: OpenAPI schema validation tests
    oauth: OAuth2 authentication tests
    api: API endpoint tests
    cart: Shopping cart functionality tests
    product: Product search and details tests
    location: Store location tests
    slow: Tests that take longer to run
    network: Tests that require network access

# Test execution options
addopts = 
    --verbose
    --tb=short
    --strict-markers
    --strict-config
    --color=yes
    --durations=10
    --showlocals
    --disable-warnings

# Async test support
asyncio_mode = auto

# Coverage configuration
[coverage:run]
source = mcp_servers/kroger
omit = 
    */tests/*
    */test_*
    */__pycache__/*
    */venv/*
    */env/*

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod

show_missing = true
precision = 2

[coverage:html]
directory = htmlcov

# Logging configuration
log_level = INFO
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Test environment variables
env = 
    TEST_MODE = true
    KROGER_CLIENT_ID = test_client_id
    KROGER_CLIENT_SECRET = test_client_secret
    KROGER_REDIRECT_URI = http://localhost:8080/callback
    KROGER_BASE_URL = https://api.kroger.com/v1
    KROGER_RATE_LIMIT_REQUESTS = 60
    KROGER_RATE_LIMIT_WINDOW = 60

# Timeout configuration
timeout = 300
timeout_method = thread

# Parallel execution (when pytest-xdist is installed)
# addopts = -n auto

# Test filtering examples:
# pytest -m "unit and not slow"           # Run unit tests excluding slow ones
# pytest -m "oauth or security"          # Run OAuth and security tests
# pytest -k "test_product"               # Run tests with 'product' in name
# pytest --markers                       # List all available markers