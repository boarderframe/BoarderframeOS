# Enhanced Security Dockerfile for MCP Server Manager
# Production-ready with comprehensive security hardening, scanning, and compliance
# Security features: multi-stage build, vulnerability scanning, SBOM generation, runtime security

ARG NODE_VERSION=18
ARG ALPINE_VERSION=3.18

# Build stage - includes dev dependencies and security scanning
FROM node:${NODE_VERSION}-alpine${ALPINE_VERSION} AS builder

# Add comprehensive security labels for container scanning and compliance
LABEL security.scan="true" \
      security.vulnerability-threshold="HIGH" \
      security.non-root="true" \
      security.distroless="false" \
      security.sbom="true" \
      maintainer="security@yourcompany.com" \
      org.opencontainers.image.title="MCP Server Manager" \
      org.opencontainers.image.description="Production MCP Server Manager with enhanced security" \
      org.opencontainers.image.vendor="Your Company" \
      org.opencontainers.image.version="2.0.0" \
      org.opencontainers.image.licenses="MIT" \
      org.opencontainers.image.source="https://github.com/yourorg/mcp-server-manager" \
      org.opencontainers.image.documentation="https://docs.yourcompany.com/mcp-server-manager"

# Install security scanning tools and update packages
RUN apk update && \
    apk upgrade && \
    apk add --no-cache \
        dumb-init=1.2.5-r2 \
        curl=8.4.0-r0 \
        wget=1.21.4-r0 \
        ca-certificates=20230506-r0 \
        tzdata=2023c-r1 \
        git=2.40.1-r0 \
        openssl=3.1.2-r0 \
        gnupg=2.4.3-r0 \
        # Security scanning tools
        trivy \
        cosign && \
    # Verify package signatures
    apk info -vv | grep -E '(curl|wget|ca-certificates)' && \
    # Remove package manager cache
    rm -rf /var/cache/apk/* /tmp/* /var/tmp/*

# Create secure build environment
WORKDIR /build

# Create non-root user for build process
RUN addgroup -g 1001 -S builduser && \
    adduser -S -D -H -u 1001 -s /sbin/nologin builduser && \
    chown -R builduser:builduser /build

# Switch to non-root user for build
USER builduser

# Copy package files for dependency analysis
COPY --chown=builduser:builduser package*.json ./

# Audit dependencies for vulnerabilities
RUN npm audit --audit-level=moderate --production && \
    npm ci --silent --production=false && \
    # Generate SBOM (Software Bill of Materials)
    npm ls --all --json > sbom.json && \
    # Clean npm cache
    npm cache clean --force

# Copy source code with proper ownership
COPY --chown=builduser:builduser src/ ./src/
COPY --chown=builduser:builduser frontend/ ./frontend/
COPY --chown=builduser:builduser config/ ./config/

# Build frontend assets
RUN npm run build 2>/dev/null || echo "No build script found, skipping frontend build"

# Security scanning stage
FROM alpine:${ALPINE_VERSION} AS security-scanner

# Install security scanning tools
RUN apk add --no-cache \
        trivy \
        grype \
        syft

# Copy built application for scanning
COPY --from=builder /build /scan

# Run comprehensive security scans
RUN set -e && \
    echo "Running security scans..." && \
    # Scan for vulnerabilities
    trivy fs --security-checks vuln --severity HIGH,CRITICAL /scan || exit 1 && \
    # Generate SBOM with Syft
    syft /scan -o json > /scan/syft-sbom.json && \
    # Scan with Grype
    grype /scan --fail-on high || exit 1 && \
    echo "Security scans completed successfully"

# Production stage - minimal runtime image with distroless approach
FROM gcr.io/distroless/nodejs18-debian11:nonroot AS production

# Copy security labels from builder
LABEL security.scan="true" \
      security.vulnerability-threshold="HIGH" \
      security.non-root="true" \
      security.distroless="true" \
      security.sbom="true" \
      maintainer="security@yourcompany.com"

# Copy dumb-init from official Alpine image
COPY --from=alpine:3.18 /usr/bin/dumb-init /usr/bin/dumb-init

# Set working directory
WORKDIR /app

# Copy application files with verified ownership (distroless uses nonroot user)
COPY --from=builder --chown=nonroot:nonroot /build/node_modules ./node_modules
COPY --from=builder --chown=nonroot:nonroot /build/src ./src
COPY --from=builder --chown=nonroot:nonroot /build/config ./config
COPY --from=builder --chown=nonroot:nonroot /build/dist ./dist
COPY --from=builder --chown=nonroot:nonroot /build/package*.json ./

# Copy SBOM and security scan results for compliance
COPY --from=builder --chown=nonroot:nonroot /build/sbom.json ./security/
COPY --from=security-scanner --chown=nonroot:nonroot /scan/syft-sbom.json ./security/

# Create data directory with proper permissions
RUN ["mkdir", "-p", "/app/data"]

# Expose non-privileged port
EXPOSE 8080

# Health check with enhanced security monitoring
HEALTHCHECK --interval=30s --timeout=10s --start-period=10s --retries=3 \
    CMD ["/nodejs/bin/node", "-e", "const http = require('http'); \
    const options = { \
        host: 'localhost', \
        port: 8080, \
        path: '/health', \
        timeout: 3000, \
        headers: { 'User-Agent': 'Docker-HealthCheck/1.0' } \
    }; \
    const req = http.request(options, (res) => { \
        if (res.statusCode === 200) { \
            let body = ''; \
            res.on('data', chunk => body += chunk); \
            res.on('end', () => { \
                try { \
                    const health = JSON.parse(body); \
                    if (health.status === 'healthy') process.exit(0); \
                    else process.exit(1); \
                } catch (e) { process.exit(1); } \
            }); \
        } else process.exit(1); \
    }); \
    req.on('error', () => process.exit(1)); \
    req.on('timeout', () => { req.destroy(); process.exit(1); }); \
    req.setTimeout(3000); \
    req.end();"]

# Set secure environment variables with hardening
ENV NODE_ENV=production \
    NODE_OPTIONS="--max-old-space-size=512 --no-deprecation --trace-warnings --disable-proto=delete --disallow-code-generation-from-strings" \
    MCP_CONFIG_PATH=/app/config/mcp.json \
    PORT=8080 \
    # Security environment variables
    NODE_TLS_REJECT_UNAUTHORIZED=1 \
    NODE_EXTRA_CA_CERTS=/etc/ssl/certs/ca-certificates.crt \
    FORCE_COLOR=0 \
    NPM_CONFIG_AUDIT_LEVEL=moderate \
    # Enhanced security settings
    NODE_DISABLE_COLORS=1 \
    NODE_NO_WARNINGS=1 \
    NODE_PRESERVE_SYMLINKS=0 \
    NODE_REDIRECT_WARNINGS=/dev/null \
    # Process security
    MALLOC_ARENA_MAX=2 \
    MALLOC_MMAP_THRESHOLD_=131072 \
    MALLOC_TRIM_THRESHOLD_=131072 \
    MALLOC_TOP_PAD_=131072 \
    MALLOC_MMAP_MAX_=65536

# Use dumb-init for proper signal handling
ENTRYPOINT ["/usr/bin/dumb-init", "--"]

# Start the application with security monitoring
CMD ["/nodejs/bin/node", "--trace-warnings", "--trace-deprecation", "src/index.js"]

# Alternative production stage using Alpine for environments that require package management
FROM node:${NODE_VERSION}-alpine${ALPINE_VERSION} AS production-alpine

# Security labels
LABEL security.scan="true" \
      security.vulnerability-threshold="HIGH" \
      security.non-root="true" \
      security.distroless="false" \
      maintainer="security@yourcompany.com"

# Install only essential runtime packages with security updates
RUN apk update && \
    apk upgrade && \
    apk add --no-cache \
        dumb-init=1.2.5-r2 \
        curl=8.4.0-r0 \
        ca-certificates=20230506-r0 \
        tzdata=2023c-r1 && \
    # Remove package manager and unnecessary tools for security
    apk del apk-tools && \
    rm -rf /var/cache/apk/* /tmp/* /var/tmp/* && \
    # Create secure temp directory
    mkdir -p /tmp && \
    chmod 1777 /tmp

# Create non-root user
RUN addgroup -g 1001 -S mcpuser && \
    adduser -S -D -H -u 1001 -s /sbin/nologin mcpuser

# Set working directory and copy with proper ownership
WORKDIR /app
COPY --from=builder --chown=mcpuser:mcpuser /build/node_modules ./node_modules
COPY --from=builder --chown=mcpuser:mcpuser /build/src ./src
COPY --from=builder --chown=mcpuser:mcpuser /build/config ./config
COPY --from=builder --chown=mcpuser:mcpuser /build/dist ./dist
COPY --from=builder --chown=mcpuser:mcpuser /build/package*.json ./

# Copy security artifacts
COPY --from=builder --chown=mcpuser:mcpuser /build/sbom.json ./security/
COPY --from=security-scanner --chown=mcpuser:mcpuser /scan/syft-sbom.json ./security/

# Create data directory and set secure permissions
RUN mkdir -p /app/data && \
    chown -R mcpuser:mcpuser /app && \
    # Security hardening: remove unnecessary binaries
    rm -rf /usr/local/lib/node_modules/npm* && \
    rm -rf /usr/local/bin/npm* && \
    # Set restrictive file permissions
    find /app -type f -exec chmod 644 {} \; && \
    find /app -type d -exec chmod 755 {} \; && \
    chmod 700 /app/config /app/data /app/security

# Switch to non-root user
USER mcpuser

# Expose non-privileged port
EXPOSE 8080

# Enhanced health check with security validation
HEALTHCHECK --interval=30s --timeout=10s --start-period=10s --retries=3 \
    CMD node -e "const http = require('http'); \
    const crypto = require('crypto'); \
    const options = { \
        host: 'localhost', \
        port: 8080, \
        path: '/health', \
        timeout: 3000, \
        headers: { \
            'User-Agent': 'Docker-HealthCheck/1.0', \
            'X-Health-Check': crypto.randomUUID() \
        } \
    }; \
    const req = http.request(options, (res) => { \
        if (res.statusCode === 200) { \
            let body = ''; \
            res.on('data', chunk => body += chunk); \
            res.on('end', () => { \
                try { \
                    const health = JSON.parse(body); \
                    if (health.status === 'healthy' && health.security && health.security.enabled) { \
                        process.exit(0); \
                    } else process.exit(1); \
                } catch (e) { process.exit(1); } \
            }); \
        } else process.exit(1); \
    }); \
    req.on('error', () => process.exit(1)); \
    req.on('timeout', () => { req.destroy(); process.exit(1); }); \
    req.setTimeout(3000); \
    req.end();"

# Production environment with enhanced security
ENV NODE_ENV=production \
    NODE_OPTIONS="--max-old-space-size=512 --no-deprecation --trace-warnings --disable-proto=delete --disallow-code-generation-from-strings --frozen-intrinsics" \
    MCP_CONFIG_PATH=/app/config/mcp.json \
    PORT=8080 \
    NODE_TLS_REJECT_UNAUTHORIZED=1 \
    NODE_EXTRA_CA_CERTS=/etc/ssl/certs/ca-certificates.crt \
    FORCE_COLOR=0 \
    NODE_DISABLE_COLORS=1 \
    NODE_NO_WARNINGS=1

# Use dumb-init for proper signal handling and process management
ENTRYPOINT ["dumb-init", "--"]

# Start application with security flags
CMD ["node", "--trace-warnings", "--trace-deprecation", "--frozen-intrinsics", "src/index.js"]