# Enhanced Security Configuration for MCP Server Manager
# Based on OWASP recommendations and security audit findings

user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

# Security: Limit worker connections to prevent resource exhaustion
events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Enhanced logging format with security context
    log_format security '$remote_addr - $remote_user [$time_local] "$request" '
                       '$status $body_bytes_sent "$http_referer" '
                       '"$http_user_agent" "$http_x_forwarded_for" '
                       '$request_time $upstream_response_time '
                       '$ssl_protocol $ssl_cipher';

    access_log /var/log/nginx/access.log security;

    # Performance and security settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    server_tokens off;  # Hide nginx version
    
    # Request limits
    client_max_body_size 10M;
    client_body_buffer_size 1K;
    client_header_buffer_size 1k;
    large_client_header_buffers 2 1k;
    
    # Timeouts to prevent slowloris attacks
    client_body_timeout 10;
    client_header_timeout 10;
    send_timeout 10;

    # Gzip compression with security considerations
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_disable "msie6";
    # Disable gzip for SSL to prevent BREACH attack
    gzip_disable "MSIE [1-6]\.(?!.*SV1)";
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/rss+xml
        application/atom+xml
        image/svg+xml
        text/x-js
        text/x-cross-domain-policy
        application/x-font-ttf
        application/x-font-opentype
        application/vnd.ms-fontobject
        image/x-icon;

    # Enhanced Security Headers
    map $sent_http_content_type $content_security_policy {
        default "default-src 'self'; script-src 'self' 'nonce-$request_id'; style-src 'self' 'nonce-$request_id'; img-src 'self' data: https:; font-src 'self'; connect-src 'self' wss: https:; frame-ancestors 'none'; base-uri 'self'; form-action 'self'; upgrade-insecure-requests;";
    }

    # Rate limiting zones with different limits for different endpoints
    limit_req_zone $binary_remote_addr zone=general:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=api:10m rate=20r/s;
    limit_req_zone $binary_remote_addr zone=login:10m rate=3r/m;
    limit_req_zone $binary_remote_addr zone=strict:10m rate=1r/s;
    
    # Connection limiting
    limit_conn_zone $binary_remote_addr zone=addr:10m;
    
    # Request method filtering
    map $request_method $bad_method {
        default 0;
        ~*^(CONNECT|TRACE) 1;
    }

    # Upstream servers with health checks
    upstream mcp_manager {
        server mcp-manager:8080 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    upstream open_webui {
        server open-webui:8080 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    upstream grafana {
        server grafana:3000 max_fails=3 fail_timeout=30s;
        keepalive 16;
    }

    upstream prometheus {
        server prometheus:9090 max_fails=3 fail_timeout=30s;
        keepalive 16;
    }

    # SSL Configuration
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:10m;
    ssl_session_tickets off;
    ssl_stapling on;
    ssl_stapling_verify on;

    # Redirect HTTP to HTTPS
    server {
        listen 80 default_server;
        listen [::]:80 default_server;
        server_name _;
        
        # Allow health checks on HTTP
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
        
        # Redirect everything else to HTTPS
        location / {
            return 301 https://$host$request_uri;
        }
    }

    # Main HTTPS Server
    server {
        listen 443 ssl http2;
        listen [::]:443 ssl http2;
        server_name localhost;

        # SSL Certificate paths
        ssl_certificate /etc/nginx/ssl/cert.pem;
        ssl_certificate_key /etc/nginx/ssl/key.pem;
        
        # Security headers
        add_header X-Frame-Options "DENY" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "0" always;  # Disabled in modern browsers
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        add_header Content-Security-Policy $content_security_policy always;
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
        add_header Permissions-Policy "geolocation=(), microphone=(), camera=(), payment=(), usb=(), magnetometer=(), accelerometer=(), gyroscope=()" always;
        add_header X-Robots-Tag "noindex, nofollow" always;
        
        # CORS Configuration (adjust origins as needed)
        set $cors_origin "";
        if ($http_origin ~* (https://trusted-domain\.com|https://app\.example\.com)) {
            set $cors_origin $http_origin;
        }
        
        add_header Access-Control-Allow-Origin $cors_origin always;
        add_header Access-Control-Allow-Credentials true always;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Authorization, Content-Type, X-Requested-With" always;
        add_header Access-Control-Max-Age 86400 always;

        # Block bad methods
        if ($bad_method) {
            return 405;
        }

        # Health check endpoint (no auth required)
        location /health {
            access_log off;
            limit_except GET {
                deny all;
            }
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        # API endpoints with rate limiting and authentication
        location /api/ {
            # Rate limiting
            limit_req zone=api burst=40 nodelay;
            limit_conn addr 10;
            
            # Authentication check (implement JWT validation here)
            auth_request /auth;
            auth_request_set $auth_status $upstream_status;
            
            # Security headers for API
            add_header X-Content-Type-Options "nosniff" always;
            add_header Cache-Control "no-store, no-cache, must-revalidate" always;
            
            proxy_pass http://mcp_manager;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Request-ID $request_id;
            
            # Remove sensitive headers
            proxy_hide_header X-Powered-By;
            proxy_hide_header Server;
            
            # Timeout settings
            proxy_connect_timeout 5s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
            
            # Buffer settings
            proxy_buffering on;
            proxy_buffer_size 4k;
            proxy_buffers 8 4k;
        }
        
        # Authentication endpoint (internal)
        location = /auth {
            internal;
            proxy_pass http://mcp_manager/auth/verify;
            proxy_pass_request_body off;
            proxy_set_header Content-Length "";
            proxy_set_header X-Original-URI $request_uri;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Login endpoint with strict rate limiting
        location /api/auth/login {
            limit_req zone=login burst=5 nodelay;
            limit_conn addr 2;
            
            proxy_pass http://mcp_manager;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # WebSocket support with authentication
        location /ws {
            # Rate limiting for WebSocket connections
            limit_req zone=strict burst=5 nodelay;
            limit_conn addr 5;
            
            # Authentication check
            auth_request /auth;
            
            proxy_pass http://mcp_manager;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # WebSocket timeout
            proxy_read_timeout 3600s;
            proxy_send_timeout 3600s;
        }

        # Static content with caching
        location /static/ {
            alias /app/static/;
            expires 30d;
            add_header Cache-Control "public, immutable" always;
            
            # Security for static files
            location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
                add_header X-Content-Type-Options "nosniff" always;
            }
        }

        # Open WebUI interface
        location / {
            limit_req zone=general burst=20 nodelay;
            
            proxy_pass http://open_webui;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Support for large uploads with security
            client_max_body_size 10M;
            client_body_temp_path /tmp 1 2;
        }

        # Monitoring endpoints with enhanced authentication
        location /monitoring/ {
            # IP-based access control (adjust as needed)
            allow 10.0.0.0/8;
            allow 172.16.0.0/12;
            allow 192.168.0.0/16;
            deny all;
            
            # Basic auth as additional layer
            auth_basic "Monitoring Access - Authorized Personnel Only";
            auth_basic_user_file /etc/nginx/.htpasswd;
            
            # Rate limiting for monitoring
            limit_req zone=strict burst=10 nodelay;
            
            location /monitoring/grafana/ {
                rewrite ^/monitoring/grafana/(.*) /$1 break;
                proxy_pass http://grafana;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
            }
            
            location /monitoring/prometheus/ {
                rewrite ^/monitoring/prometheus/(.*) /$1 break;
                proxy_pass http://prometheus;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
            }
        }

        # Block access to sensitive files and patterns
        location ~ /\. {
            deny all;
            access_log off;
            log_not_found off;
            return 404;
        }
        
        # Block backup and sensitive file extensions
        location ~* \.(sql|bak|backup|log|env|git|svn|swp|old|~|orig|tmp|exe|dll|so|dmg)$ {
            deny all;
            access_log off;
            log_not_found off;
            return 404;
        }
        
        # Block access to configuration files
        location ~* \.(ini|conf|config|cfg|yaml|yml|toml)$ {
            deny all;
            access_log off;
            log_not_found off;
            return 404;
        }
        
        # Prevent directory listing
        location ~ /$ {
            if ($request_uri ~ "^[^?]*?//") {
                return 404;
            }
        }
        
        # Custom error pages
        error_page 400 /errors/400.html;
        error_page 401 /errors/401.html;
        error_page 403 /errors/403.html;
        error_page 404 /errors/404.html;
        error_page 500 502 503 504 /errors/50x.html;
        
        location ^~ /errors/ {
            internal;
            root /usr/share/nginx/html;
        }
    }
}