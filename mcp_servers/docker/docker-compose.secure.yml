version: '3.9'

# ============================================================================
# SECURE DOCKER COMPOSE FOR MCP-UI SYSTEM
# ============================================================================

services:
  # ==========================================================================
  # REVERSE PROXY & TLS TERMINATION
  # ==========================================================================
  nginx:
    image: nginx:alpine
    container_name: mcp-ui-nginx
    restart: unless-stopped
    ports:
      - "443:443"
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/dhparam.pem:/etc/nginx/dhparam.pem:ro
    networks:
      - mcp-frontend
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /var/cache/nginx
      - /var/run
    depends_on:
      - app
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ==========================================================================
  # MAIN APPLICATION
  # ==========================================================================
  app:
    build:
      context: ..
      dockerfile: docker/Dockerfile.secure
    image: mcp-ui:secure
    container_name: mcp-ui-app
    restart: unless-stopped
    environment:
      # Database
      DATABASE_URL: "postgresql://mcp_user:${DB_PASSWORD}@postgres:5432/mcp_ui"
      REDIS_URL: "redis://:${REDIS_PASSWORD}@redis:6379/0"
      
      # Security Keys (use secrets in production)
      SECRET_KEY: "${SECRET_KEY}"
      ENCRYPTION_KEY: "${ENCRYPTION_KEY}"
      MASTER_ENCRYPTION_KEY: "${MASTER_ENCRYPTION_KEY}"
      
      # OAuth
      KROGER_CLIENT_ID: "${KROGER_CLIENT_ID}"
      KROGER_CLIENT_SECRET: "${KROGER_CLIENT_SECRET}"
      KROGER_REDIRECT_URI: "https://app.mcp-ui.com/api/v1/auth/callback/kroger"
      
      # Security Settings
      SECURE_SSL_REDIRECT: "true"
      SESSION_COOKIE_SECURE: "true"
      CSRF_COOKIE_SECURE: "true"
      
      # Logging
      LOG_LEVEL: "INFO"
      AUDIT_LOG_ENABLED: "true"
    volumes:
      - app-logs:/var/log/mcp-ui:rw
      - ./config:/app/config:ro
    networks:
      - mcp-backend
      - mcp-frontend
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    read_only: true
    tmpfs:
      - /tmp
      - /var/run
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G

  # ==========================================================================
  # POSTGRESQL DATABASE
  # ==========================================================================
  postgres:
    image: postgres:15-alpine
    container_name: mcp-ui-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: mcp_ui
      POSTGRES_USER: mcp_user
      POSTGRES_PASSWORD: "${DB_PASSWORD}"
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
      POSTGRES_HOST_AUTH_METHOD: scram-sha-256
    volumes:
      - postgres-data:/var/lib/postgresql/data:rw
      - ./postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
      - ./postgres/pg_hba.conf:/etc/postgresql/pg_hba.conf:ro
    networks:
      - mcp-backend
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - DAC_READ_SEARCH
      - SETGID
      - SETUID
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mcp_user -d mcp_ui"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

  # ==========================================================================
  # REDIS CACHE
  # ==========================================================================
  redis:
    image: redis:7-alpine
    container_name: mcp-ui-redis
    restart: unless-stopped
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --appendonly yes
      --appendfilename "redis-aof.aof"
      --dbfilename "redis-dump.rdb"
      --save 900 1
      --save 300 10
      --save 60 10000
      --tcp-backlog 511
      --tcp-keepalive 300
      --timeout 0
      --protected-mode yes
      --bind 0.0.0.0
      --port 6379
    volumes:
      - redis-data:/data:rw
    networks:
      - mcp-backend
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - SETGID
      - SETUID
    read_only: true
    tmpfs:
      - /tmp
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # ==========================================================================
  # VAULT FOR SECRETS MANAGEMENT
  # ==========================================================================
  vault:
    image: vault:latest
    container_name: mcp-ui-vault
    restart: unless-stopped
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: "${VAULT_ROOT_TOKEN}"
      VAULT_DEV_LISTEN_ADDRESS: "0.0.0.0:8200"
      VAULT_LOG_LEVEL: "info"
    cap_add:
      - IPC_LOCK
    volumes:
      - vault-data:/vault/file:rw
      - vault-logs:/vault/logs:rw
      - ./vault/config.hcl:/vault/config/config.hcl:ro
    networks:
      - mcp-backend
    security_opt:
      - no-new-privileges:true
    healthcheck:
      test: ["CMD", "vault", "status", "-tls-skip-verify"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M

  # ==========================================================================
  # MONITORING - PROMETHEUS
  # ==========================================================================
  prometheus:
    image: prom/prometheus:latest
    container_name: mcp-ui-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.time=30d'
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus:rw
    networks:
      - mcp-monitoring
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    user: "65534:65534"  # nobody user
    read_only: true
    tmpfs:
      - /tmp
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ==========================================================================
  # MONITORING - GRAFANA
  # ==========================================================================
  grafana:
    image: grafana/grafana:latest
    container_name: mcp-ui-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_PASSWORD: "${GRAFANA_PASSWORD}"
      GF_SERVER_ROOT_URL: "https://metrics.mcp-ui.com"
      GF_INSTALL_PLUGINS: "grafana-piechart-panel"
      GF_USERS_ALLOW_SIGN_UP: "false"
      GF_SECURITY_COOKIE_SECURE: "true"
      GF_SECURITY_STRICT_TRANSPORT_SECURITY: "true"
      GF_SECURITY_CONTENT_SECURITY_POLICY: "true"
    volumes:
      - grafana-data:/var/lib/grafana:rw
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - mcp-monitoring
      - mcp-frontend
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    user: "472:472"  # grafana user
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

# ============================================================================
# NETWORKS
# ============================================================================
networks:
  mcp-frontend:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: mcp-frontend
    ipam:
      config:
        - subnet: 172.28.0.0/24
  
  mcp-backend:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: mcp-backend
    ipam:
      config:
        - subnet: 172.28.1.0/24
    internal: true
  
  mcp-monitoring:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: mcp-monitoring
    ipam:
      config:
        - subnet: 172.28.2.0/24
    internal: true

# ============================================================================
# VOLUMES
# ============================================================================
volumes:
  app-logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/logs/app
  
  postgres-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/data/postgres
  
  redis-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/data/redis
  
  vault-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/data/vault
  
  vault-logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/logs/vault
  
  prometheus-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/data/prometheus
  
  grafana-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/data/grafana