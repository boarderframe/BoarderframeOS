#!/usr/bin/env python3
"""
Script to configure Open WebUI to use local model for tagging tasks
"""

import requests
import json
import sys

# Configuration
WEBUI_BASE_URL = "http://localhost:8080"
API_KEY = "sk-1234567890abcdef"  # Your Open WebUI API key
LOCAL_MODEL = "lm.gpt-oss-20b"

def configure_task_models():
    """Configure task models to use local model for cost savings"""
    
    headers = {
        "Authorization": f"Bearer {API_KEY}",
        "Content-Type": "application/json"
    }
    
    # Get current configuration
    try:
        response = requests.get(f"{WEBUI_BASE_URL}/api/tasks/config", headers=headers)
        if response.status_code == 200:
            current_config = response.json()
            print("✅ Current task configuration retrieved")
        else:
            print(f"❌ Could not get current config: {response.status_code}")
            return False
    except requests.exceptions.RequestException as e:
        print(f"❌ Error connecting to Open WebUI: {e}")
        return False
    
    # Update configuration to use local model
    config_update = {
        **current_config,
        "TASK_MODEL": LOCAL_MODEL,
        "TASK_MODEL_EXTERNAL": LOCAL_MODEL,
        "ENABLE_TAGS_GENERATION": True,
        "ENABLE_TITLE_GENERATION": True
    }
    
    try:
        response = requests.post(
            f"{WEBUI_BASE_URL}/api/tasks/config/update", 
            headers=headers,
            json=config_update
        )
        
        if response.status_code == 200:
            print(f"✅ Task models configured successfully!")
            print(f"   - TASK_MODEL: {LOCAL_MODEL}")
            print(f"   - TASK_MODEL_EXTERNAL: {LOCAL_MODEL}")
            print("   - Tags and titles will now use your local model")
            return True
        else:
            print(f"❌ Failed to update config: {response.status_code}")
            print(f"   Response: {response.text}")
            return False
            
    except requests.exceptions.RequestException as e:
        print(f"❌ Error updating configuration: {e}")
        return False

def main():
    print("🔧 Configuring Open WebUI for local tagging...")
    print(f"   Local model: {LOCAL_MODEL}")
    print(f"   Target: {WEBUI_BASE_URL}")
    print()
    
    if configure_task_models():
        print()
        print("🎉 Configuration complete!")
        print()
        print("Next steps:")
        print("1. Start a new conversation with GPT-5")
        print("2. Have a few back-and-forth exchanges")
        print("3. Check if tags are now generated by your local model")
        print("4. You should see cost savings on tag/title generation")
        print()
        print("Expected results:")
        print("- Conversation responses: GPT-5 (costs tokens)")
        print("- Tag generation: lm.gpt-oss-20b (free)")
        print("- Title generation: lm.gpt-oss-20b (free)")
    else:
        print()
        print("❌ Configuration failed!")
        print("Please configure manually through the Open WebUI admin interface:")
        print("1. Go to Admin Panel > Tasks/AI Configuration")
        print("2. Set TASK_MODEL_EXTERNAL = 'lm.gpt-oss-20b'")
        print("3. Enable tag generation")

if __name__ == "__main__":
    main()